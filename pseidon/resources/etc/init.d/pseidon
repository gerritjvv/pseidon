#!/usr/bin/env bash
# chkconfig: 2345 20 80
# description: pseidon
#
# /etc/rc.d/init.d/pseidon
#
# Source function library.

if [ -f /etc/init.d/functions ]; then
. /etc/init.d/functions
fi

if [ ! -f /var/lock/subsys ]; then
  mkdir -p /var/lock/subsys
fi

if [ -f /etc/profile.d/java ]; then
 . /etc/profile.d/java
fi

if [ -f /etc/profile.d/java.sh ]; then
 . /etc/profile.d/java.sh
fi

LOCKFILE="/var/lock/subsys/pseidon"
PIDFILE="/var/run/pseidon.pid"

#setup glue home variable
if [ -z "$PSEIDON_HOME" ]; then
  export PSEIDON_HOME="/opt/glue"
fi

if [ -z "$CONF_DIR" ]; then
  export CONF_DIR="$PSEIDON_HOME/conf"
fi

LAUNCH_CLASS="org.glue.rest.Launcher"
CLIENT_CLASS="org.glue.rest.Client"

if [ -z "$JAVA_HOME" ]; then

 echo "No JAVA_HOME defined setting to /usr/java/latest"
 export JAVA_HOME="/usr/java/latest"

fi


JAVA=$JAVA_HOME/bin/java

if [ -z $JAVA_HEAP ]; then
 export JAVA_HEAP="-XX:PermSize=64M -XX:MaxPermSize=512M -Xmx2048m"
fi

CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar

# so that filenames w/ spaces are handled correctly in loops below
# add libs to CLASSPATH.
CLASSPATH=${CLASSPATH}:$PSEIDON_HOME/lib/*;
CLASSPATH=$CONF_DIR:$CONF_DIR/META-INF:$CLASSPATH

JAVA_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxDirectMemorySize=1024M -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:SurvivorRatio=6 -XX:NewRatio=3 -XX:+DisableExplicitGC $JAVA_OPTS"



startPseidon(){
  echo
  
  LOG="$PSEIDON_HOME/log/serverlog.log"

  RUN_CMD="$JAVA $JAVA_HEAP $JAVA_OPTS -classpath "$CLASSPATH" $LAUNCH_CLASS $CONF_DIR/exec.groovy $CONF_DIR/modules.groovy"
  
  nohup $RUN_CMD > "$LOG" 2>&1 < /dev/null &
  RETVAL=$?
  echo $! > $PIDFILE

  sleep 2; tail "$LOG"

  return $RETVAL
}


stopPseidon(){

   #stop glue server via the client first
   RUN_CMD="$JAVA $JAVA_HEAP $JAVA_OPTS -classpath "$CLASSPATH" $CLIENT_CLASS -stop"  

   exec $RUN_CMD 

   sleep 5s

   #check if still running after client command was called
   checkIfRunning
   ISRUNNING=$?


   if [ $ISRUNNING == 0  ]; then
     echo "pseidon is still running"
     exit 1
   fi 

  
}


exitIfRunning(){
 # Check to see if the glue server is running
 # if so this function calls exit 1

 PID=$(pgrep -f $LAUNCH_CLASS)

 if [ ! -z $PID ]; then
   echo "pseidon is running $PID"
   exit 1
 fi

}

checkIfRunning(){
  #if the pseidon is running this script will return 0 else 1
  RETVAL=0
  PID=$(pgrep -f $LAUNCH_CLASS)

  if [ -z $PID ]; then
   RETVAL=1
  fi   

  return $RETVAL
}

start() {

          #this method will exit if running
          exitIfRunning
          
          echo -n "Starting : pseidon"

          startPseidon
          RETVAL=$?
          checkIfRunning
          ISRUNNING=$?

          if [[ $RETVAL == 0 &&  $ISRUNNING == 0 ]]; then
           touch $LOCKFILE
          else
            echo -n "pseidon could not be started"
          fi

        echo        
        return $RETVAL
}

stop() {

        checkIfRunning
        ISRUNNING=$?
        if [ $ISRUNNING == 0 ]; then
          echo -n "Shutting down : pseidon "
         
         stopPseidon         
         rm -f $LOCKFILE
         
        else
          echo -n "pseidon is not running"
        fi

        echo
        return 0
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status pseidon
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: pseidon  {start|stop|status|reload|restart[|probe]"
        exit 1
        ;;
esac
exit $?