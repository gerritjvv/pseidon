#!/usr/bin/env bash
#
# redis        init file for starting up the redis daemon
#
# chkconfig:   - 20 80
# description: Starts and stops the redis daemon.

# Source function library.
. /etc/rc.d/init.d/functions

REDIS_VERSION="3.0.0-rc4"
REDIS_NAME="redis-$REDIS_VERSION"

name="redis-server"
exec="/opt/$REDIS_NAME/src/redis-server"

REDIS_CONFIG_ORG="/etc/redis-cluster.conf"

REDIS_NODES="/etc/redis-nodes"

[ -e /etc/sysconfig/redis ] && . /etc/sysconfig/redis

#reset redis permissions
chown -R redis /var/log/redis-dat

start() {

NODES=""

HOST=`ip a s|sed -ne '/127.0.0.1/!{s/^[ \t]*inet[ \t]*\([0-9.]\+\)\/.*$/\1/p}' | tail -n 1`

while read PORT; do

    echo $PORT
    mkdir -p /var/run/redis/

    pidfile="/var/run/redis/redis_$PORT.pid"

    REDIS_CONFIG="/etc/redis${PORT}.conf"
    sed "s/\$PORT/$PORT/g" $REDIS_CONFIG_ORG > $REDIS_CONFIG
    sed -i "s/\$HOST/$HOST/g" $REDIS_CONFIG

    NODES="$NODES $HOST:$PORT"
    mkdir -p /var/lock/subsys
    lockfile=/var/lock/subsys/redis$PORT

    [ -f $REDIS_CONFIG ] || exit 6
    [ -x $exec ] || exit 5
    echo -n $"Starting $name: "
    daemon --user ${REDIS_USER-redis} $exec $REDIS_CONFIG

    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile

    echo "OK"

done <$REDIS_NODES

sleep 1s

echo /opt/$REDIS_NAME/src/redis-trib.rb create $NODES

if [ `ls /var/log/redis-dat | wc -l` == 0 ]; then

 echo "Redis cluster setup"
 echo 'yes' | /opt/$REDIS_NAME/src/redis-trib.rb create $NODES

fi


    return $retval
}

stop() {

while read PORT; do

    echo $PORT
    pidfile="/var/run/redis/redis_$PORT.pid"
    lockfile=/var/lock/subsys/redis$PORT

    echo -n $"Stopping $name: "
    killproc -p $pidfile $name
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile

done <$REDIS_NODES

    return $retval
}

restart() {
    stop
    start
}

reload() {
    false
}

rh_status() {

while read PORT; do
    pidfile="/var/run/redis/redis_$PORT.pid"
    status $pidfile $name
done <$REDIS_NODES

}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart}"
        exit 2
esac
exit $?